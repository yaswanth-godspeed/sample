"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.recurseSchema = exports.decodeRefNameOpenApi = exports.encodeRefNameOpenApi = exports.decodeRefNameJsonSchema = exports.encodeRefNameJsonSchema = exports.decodePathPart = exports.encodePathPart = void 0;
function encodePathPart(part) {
    return encodeURIComponent(part);
}
exports.encodePathPart = encodePathPart;
function decodePathPart(part) {
    return decodeURIComponent(part);
}
exports.decodePathPart = decodePathPart;
function encodeRefNameJsonSchema(name) {
    return `#/definitions/${encodePathPart(name)}`;
}
exports.encodeRefNameJsonSchema = encodeRefNameJsonSchema;
function decodeRefNameJsonSchema(name) {
    if (name.startsWith("#/definitions/"))
        return decodePathPart(name.slice(14));
    return decodePathPart(name);
}
exports.decodeRefNameJsonSchema = decodeRefNameJsonSchema;
function encodeRefNameOpenApi(name) {
    return `#/components/schemas/${encodePathPart(name)}`;
}
exports.encodeRefNameOpenApi = encodeRefNameOpenApi;
function decodeRefNameOpenApi(name) {
    if (name.startsWith("#/components/schemas/"))
        return decodePathPart(name.slice(21));
    return decodePathPart(name);
}
exports.decodeRefNameOpenApi = decodeRefNameOpenApi;
function hasProperties(t) {
    return t && Object.keys(t).length > 0;
}
function recurseSchema(t, convert) {
    if (typeof t !== 'object')
        return t;
    const schema = t;
    return {
        ...(schema),
        ...(typeof schema.items !== 'object' ? {}
            : Array.isArray(schema.items)
                ? { items: schema.items.map(item => convert(item)) }
                : { items: convert(schema.items) }),
        ...(typeof schema.additionalItems !== 'object' ? {}
            : { additionalItems: convert(schema.additionalItems) }),
        ...(typeof schema.contains !== 'object' ? {}
            : { contains: convert(schema.contains) }),
        ...(!hasProperties(schema.properties) ? {} :
            {
                properties: Object.fromEntries(Object.keys(schema.properties)
                    .map(key => { var _a; return [key, convert((_a = schema.properties) === null || _a === void 0 ? void 0 : _a[key])]; })),
            }),
        ...(!hasProperties(schema.patternProperties) ? {} :
            {
                patternProperties: Object.fromEntries(Object.keys(schema.patternProperties)
                    .map(key => { var _a; return [key, convert((_a = schema.patternProperties) === null || _a === void 0 ? void 0 : _a[key])]; })),
            }),
        ...(typeof schema.additionalProperties !== 'object' ? {}
            : { additionalProperties: convert(schema.additionalProperties) }),
        ...(!hasProperties(schema.dependencies) ? {} :
            {
                dependencies: Object.fromEntries(Object.keys(schema.dependencies)
                    .map(key => { var _a; return [key, convert((_a = schema.dependencies) === null || _a === void 0 ? void 0 : _a[key])]; })),
            }),
        ...(typeof schema.propertyNames !== 'object' ? {}
            : { propertyNames: convert(schema.propertyNames) }),
        ...(typeof schema.if !== 'object' ? {}
            : { if: convert(schema.if) }),
        ...(typeof schema.then !== 'object' ? {}
            : { then: convert(schema.then) }),
        ...(typeof schema.else !== 'object' ? {}
            : { else: convert(schema.else) }),
        ...((typeof schema.allOf !== 'object' || !schema.allOf.length) ? {}
            : { allOf: schema.allOf.map((item) => convert(item)) }),
        ...((typeof schema.anyOf !== 'object' || !schema.anyOf.length) ? {}
            : { anyOf: schema.anyOf.map((item) => convert(item)) }),
        ...((typeof schema.oneOf !== 'object' || !schema.oneOf.length) ? {}
            : { oneOf: schema.oneOf.map((item) => convert(item)) }),
        ...(typeof schema.not !== 'object' ? {}
            : { not: convert(schema.not) }),
        ...(!hasProperties(schema.definitions) ? {} :
            {
                definitions: Object.fromEntries(Object.keys(schema.definitions)
                    .map(key => { var _a; return [key, convert((_a = schema.definitions) === null || _a === void 0 ? void 0 : _a[key])]; })),
            }),
    };
}
exports.recurseSchema = recurseSchema;
