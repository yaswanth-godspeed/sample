"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonSchemaTypeToOpenApi = void 0;
const utils_1 = require("./utils");
function jsonSchemaTypeToOpenApiConvertType(schema) {
    if (schema.type === undefined)
        return schema;
    const { type: _type, ...rest } = schema;
    const nullable = Array.isArray(_type)
        ? _type.includes('null')
        : _type === 'null';
    const type = Array.isArray(_type)
        ? _type.filter(val => val !== 'null')
        : _type === 'null'
            ? undefined
            : _type;
    const decorateType = (t, type) => (type === "any" || !type) ? t : ({ ...t, type });
    if (typeof schema.const !== 'undefined') {
        rest.enum = [schema.const];
        delete rest.const;
    }
    const decorateNullable = (t) => nullable ? ({ ...t, nullable }) : t;
    if (Array.isArray(type)) {
        if (type.length === 0)
            return decorateNullable(rest);
        else if (type.length === 1)
            return decorateType(decorateNullable(rest), type[0]);
        else {
            return {
                ...decorateNullable(rest),
                anyOf: type.map(type => decorateType({}, type)),
            };
        }
    }
    return decorateType(decorateNullable(rest), type);
}
function jsonSchemaToOpenApi7Ref(node) {
    if (node.$ref)
        return {
            ...node,
            $ref: (0, utils_1.encodeRefNameOpenApi)((0, utils_1.decodeRefNameJsonSchema)(node.$ref)),
        };
    return node;
}
function jsonSchemaTypeToOpenApi(schema) {
    if (typeof schema === 'boolean')
        return schema;
    schema = jsonSchemaTypeToOpenApiConvertType(schema);
    schema = jsonSchemaToOpenApi7Ref(schema);
    // TODO: Proper draft 7-to-4 conversion
    return (0, utils_1.recurseSchema)(schema, jsonSchemaTypeToOpenApi);
}
exports.jsonSchemaTypeToOpenApi = jsonSchemaTypeToOpenApi;
