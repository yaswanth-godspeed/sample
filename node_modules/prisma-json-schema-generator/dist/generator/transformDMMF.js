"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "transformDMMF", {
    enumerable: true,
    get: function() {
        return transformDMMF;
    }
});
const _constants = require("./constants");
const _helpers = require("./helpers");
const _jsonSchema = require("./jsonSchema");
const _model = require("./model");
function getPropertyDefinition({ schemaId }) {
    return (model)=>{
        const ref = `${_constants.DEFINITIONS_ROOT}${model.name}`;
        return [
            (0, _helpers.toCamelCase)(model.name),
            {
                $ref: schemaId ? `${schemaId}${ref}` : ref
            }
        ];
    };
}
function transformDMMF(dmmf, transformOptions = {}) {
    // TODO: Remove default values as soon as prisma version < 3.10.0 doesn't have to be supported anymore
    const { models = [], enums = [], types = [] } = dmmf.datamodel;
    const initialJSON = (0, _jsonSchema.getInitialJSON)();
    const { schemaId } = transformOptions;
    const modelDefinitionsMap = models.map((0, _model.getJSONSchemaModel)({
        enums
    }, transformOptions));
    const typeDefinitionsMap = types.map((0, _model.getJSONSchemaModel)({
        enums
    }, transformOptions));
    const modelPropertyDefinitionsMap = models.map(getPropertyDefinition(transformOptions));
    const definitions = Object.fromEntries([
        ...modelDefinitionsMap,
        ...typeDefinitionsMap
    ]);
    const properties = Object.fromEntries(modelPropertyDefinitionsMap);
    return {
        ...schemaId ? {
            $id: schemaId
        } : null,
        ...initialJSON,
        definitions,
        properties
    };
}
