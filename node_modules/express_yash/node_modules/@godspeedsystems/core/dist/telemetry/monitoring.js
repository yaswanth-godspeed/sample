"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.promClient = void 0;
/*
* You are allowed to study this software for learning and local * development purposes only. Any other use without explicit permission by Mindgrep, is prohibited.
* Â© 2022 Mindgrep Technologies Pvt Ltd
*/
const prom_client_1 = __importDefault(require("prom-client"));
exports.promClient = prom_client_1.default;
//const register = new promClient.Registry();
const defaultLabels = { serviceName: process.env.OTEL_SERVICE_NAME || 'unknown_service:node' };
prom_client_1.default.register.setDefaultLabels(defaultLabels);
/* Commenting the code for now as we are using prometheus metrics as middleware and exposing them on /metrics */
// import { config } from '../core/loader';  // eslint-disable-line
// 'use strict';
// const { OTLPMetricExporter } = require('@opentelemetry/exporter-metrics-otlp-grpc');
// const { MeterProvider, PeriodicExportingMetricReader } = require('@opentelemetry/sdk-metrics-base');
// const metricExporter = new OTLPMetricExporter({});
// const meterProvider = new MeterProvider({});
// meterProvider.addMetricReader(new PeriodicExportingMetricReader({
//   exporter: metricExporter,
//   exportIntervalMillis: config.app.config.telemetry?.metrics?.export?.interval || 60000,
// }));
// const meter = meterProvider.getMeter('gs-exporter-collector');
// require('opentelemetry-node-metrics')(meterProvider);
//# sourceMappingURL=monitoring.js.map