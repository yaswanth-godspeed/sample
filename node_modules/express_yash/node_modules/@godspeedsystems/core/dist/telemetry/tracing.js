"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
* You are allowed to study this software for learning and local * development purposes only. Any other use without explicit permission by Mindgrep, is prohibited.
* Â© 2022 Mindgrep Technologies Pvt Ltd
*/
const api_1 = require("@opentelemetry/api");
const opentelemetry_instrumentation_kafkajs_1 = require("opentelemetry-instrumentation-kafkajs");
const instrumentation_pino_1 = require("@opentelemetry/instrumentation-pino");
const core_1 = require("@opentelemetry/core");
const opentelemetry = require("@opentelemetry/sdk-node");
//Disable all autoinstrumentations because they do logging of all express middleware also.
//const { getNodeAutoInstrumentations } = require("@opentelemetry/auto-instrumentations-node");
const { HttpInstrumentation } = require('@opentelemetry/instrumentation-http');
const { ExpressInstrumentation } = require('@opentelemetry/instrumentation-express');
const { NodeTracerProvider } = require('@opentelemetry/sdk-trace-node');
const { OTLPTraceExporter } = require('@opentelemetry/exporter-otlp-grpc');
const { ConsoleSpanExporter } = require('@opentelemetry/sdk-trace-base');
let traceExporter;
if (process.env.NODE_ENV != 'dev') {
    traceExporter = new OTLPTraceExporter();
}
else {
    traceExporter = new ConsoleSpanExporter();
    process.env.OTEL_TRACES_SAMPLER = 'parentbased_traceidratio';
    process.env.OTEL_TRACES_SAMPLER_ARG = "0.25";
}
const tracerProvider = new NodeTracerProvider({
    plugins: {
        kafkajs: { enabled: false, path: 'opentelemetry-plugin-kafkajs' }
    }
});
api_1.diag.setLogger(new api_1.DiagConsoleLogger(), (0, core_1.getEnv)().OTEL_LOG_LEVEL);
const sdk = new opentelemetry.NodeSDK({
    tracerProvider,
    traceExporter,
    instrumentations: [new HttpInstrumentation({
            requestHook: (span, request) => {
                if (span.attributes.span_operation === 'INCOMING') {
                    span.updateName(span.name + " (Incoming)");
                    const spanCtx = span.spanContext();
                    span.setAttributes({
                        'traceId': spanCtx.traceId,
                        'spanId': spanCtx.spanId
                    });
                }
                else {
                    span.updateName(span.name + " (Outgoing)");
                    const spanCtx = span.spanContext();
                    span.setAttributes({
                        'traceId': spanCtx.traceId,
                        'spanId': spanCtx.spanId
                    });
                }
            },
            startIncomingSpanHook: (request) => {
                return { span_operation: 'INCOMING' };
            }
        }),
        ExpressInstrumentation,
        new opentelemetry_instrumentation_kafkajs_1.KafkaJsInstrumentation({
            producerHook: (span, topic, message) => {
                span.updateName('Kafka producer: ' + topic);
                const spanCtx = span.spanContext();
                span.setAttributes({
                    'traceId': spanCtx.traceId,
                    'spanId': spanCtx.spanId
                });
            },
            consumerHook: (span, topic, message) => {
                span.updateName('Kafka consumer: ' + topic);
                const spanCtx = span.spanContext();
                span.setAttributes({
                    'traceId': spanCtx.traceId,
                    'spanId': spanCtx.spanId
                });
            }
        }),
        new instrumentation_pino_1.PinoInstrumentation({}),],
    ignoreLayers: true
});
//const { logger } = require('../core/logger');
// sdk.start()
//   .then(() => console.log('Tracing initialized'))
//   .catch((error: any) => logger.error('Error initializing tracing', error));
// // gracefully shut down the SDK on process exit
// process.on('SIGTERM', () => {
//   sdk.shutdown()
//     .then(() => console.log('Tracing terminated'))
//     .catch((error: any) => logger.error('Error terminating tracing', error))
//     .finally(() => process.exit(0));
// });
sdk.start()
    .then(() => console.log('Tracing initialized'))
    .catch((error) => console.error('Error initializing tracing', error));
// gracefully shut down the SDK on process exit
process.on('SIGTERM', () => {
    sdk.shutdown()
        .then(() => console.log('Tracing terminated'))
        .catch((error) => console.error('Error terminating tracing', error))
        .finally(() => process.exit(0));
});
//# sourceMappingURL=tracing.js.map