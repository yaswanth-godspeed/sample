"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSwaggerJSON = void 0;
const config_1 = __importDefault(require("config"));
const port = process.env.PORT || 3000;
const customServerUrl = config_1.default.server_url || `http://localhost:${port}`;
const swaggerCommonPart = {
    "openapi": "3.0.0",
    "info": {
        "version": "0.0.1",
        "title": "Godspeed: Sample Microservice",
        "description": "Sample API calls demonstrating the functionality of Godspeed framework",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Mindgrep Technologies Pvt Ltd",
            "email": "talktous@mindgrep.com",
            "url": "https://docs.mindgrep.com/docs/microservices/intro"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "servers": [{
            "url": "http://localhost:3001"
        }],
    "paths": {}
};
const generateSwaggerJSON = (events, definitions) => {
    const finalSpecs = JSON.parse(JSON.stringify(swaggerCommonPart)); // deep clone
    Object.keys(events).forEach(event => {
        var _a, _b, _c, _d;
        let apiEndPoint = event.split('.')[0];
        apiEndPoint = apiEndPoint.replace(/:([^\/]+)/g, '{$1}'); //We take :path_param. OAS3 takes {path_param}
        const method = event.split('.')[2];
        const eventSchema = events[event];
        //Initialize the schema for this method, for given event
        let methodSpec = {
            summary: eventSchema.summary,
            description: eventSchema.description,
            requestBody: eventSchema.body || ((_b = (_a = eventSchema.data) === null || _a === void 0 ? void 0 : _a.schema) === null || _b === void 0 ? void 0 : _b.body),
            parameters: eventSchema.parameters ||
                eventSchema.params ||
                ((_d = (_c = eventSchema.data) === null || _c === void 0 ? void 0 : _c.schema) === null || _d === void 0 ? void 0 : _d.params),
            responses: eventSchema.responses,
        };
        //Set it in the overall schema
        // @ts-ignore
        finalSpecs.paths[apiEndPoint] = Object.assign(Object.assign({}, finalSpecs.paths[apiEndPoint]), { [method]: methodSpec });
    });
    finalSpecs.definitions = definitions;
    return finalSpecs;
};
exports.generateSwaggerJSON = generateSwaggerJSON;
//# sourceMappingURL=swagger.js.map