"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const logger_1 = require("../logger");
const yamlLoader_1 = __importDefault(require("./yamlLoader"));
function default_1(eventsourcesFolderPath, datasources) {
    var _a, e_1, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        var _d;
        logger_1.logger.debug('eventsourcesFolderPath %s', eventsourcesFolderPath);
        logger_1.logger.debug('Datasources %o', Object.keys(datasources));
        const eventsourcesConfigs = yield (0, yamlLoader_1.default)(eventsourcesFolderPath, false);
        const eventSources = {};
        try {
            for (var _e = true, _f = __asyncValues(Object.keys(eventsourcesConfigs)), _g; _g = yield _f.next(), _a = _g.done, !_a;) {
                _c = _g.value;
                _e = false;
                try {
                    let esName = _c;
                    // let's load the event source
                    const eventSourceConfig = eventsourcesConfigs[esName];
                    debugger; // eslint-disable-line
                    try {
                        const Module = yield (_d = path_1.default.join(eventsourcesFolderPath, 'types', eventSourceConfig.type), Promise.resolve().then(() => __importStar(require(_d))));
                        // @ts-ignore
                        const isPureEventSource = !!Object.hasOwnProperty.call(Module.default.prototype, 'initClient');
                        let eventSourceInatance;
                        if (isPureEventSource) {
                            // @ts-ignore
                            eventSourceInatance = new Module.default(eventsourcesConfigs[esName]); // eslint-disable-line new-cap
                            if ('init' in eventSourceInatance) {
                                yield eventSourceInatance.init();
                            }
                        }
                        else {
                            let correspondingDatasource = datasources[esName]; // By design, datasource and event source need to share the same name.
                            if (!correspondingDatasource) {
                                throw new Error(`Corresponding datasource for eventsource ${esName} is not defined. Please ensure a datasource type exists with the same file name in /datasources directory`);
                            }
                            else {
                                // @ts-ignore
                                eventSourceInatance = new Module.default(eventsourcesConfigs[esName], correspondingDatasource.client); // eslint-disable-line new-cap
                            }
                        }
                        eventSources[esName] = eventSourceInatance;
                    }
                    catch (error) {
                        logger_1.logger.error(error);
                    }
                }
                finally {
                    _e = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_e && !_a && (_b = _f.return)) yield _b.call(_f);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return eventSources;
    });
}
exports.default = default_1;
;
//# sourceMappingURL=_eventsourceLoader.js.map