"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const logger_1 = require("../logger");
function loadModules(pathString, global = false) {
    let api = {};
    logger_1.logger.info('Loading %s from %s', path_1.default.basename(pathString), pathString);
    return new Promise((resolve, reject) => {
        (0, glob_1.default)(pathString + '/**/*.?(js)', function (err, res) {
            logger_1.logger.debug('processing files: %s', res);
            if (err) {
                reject(err);
            }
            else {
                Promise.all(res.map((file) => {
                    var _a;
                    return (_a = path_1.default.relative(__dirname, file).replace(/\.(js)/, ''), Promise.resolve().then(() => __importStar(require(_a)))).then((module) => {
                        if (file.match(/.*?\/plugins\//)) {
                            const id = file
                                .replace(/.*?\/(plugins)\//, '')
                                .replace(/\//g, '_')
                                .replace(/\.(js)/i, '')
                                .replace(/\_index$/, '');
                            // Load plugins at global level to provide backward compatibilty
                            api = Object.assign(Object.assign({}, api), module);
                            // Load plugins with namespace using underscore notation
                            if (id == 'index') {
                                api = Object.assign(Object.assign({}, api), module);
                            }
                            else {
                                for (let f in module) {
                                    if (f == 'default') {
                                        api[id] = module[f];
                                    }
                                    else {
                                        api[id + '_' + f] = module[f];
                                    }
                                }
                            }
                        }
                        else {
                            const id = file
                                .replace(/.*?\/functions\//, '')
                                .replace(/\//g, '.')
                                .replace(/\.(js)/i, '')
                                .replace(/\.index$/, '');
                            if (global) {
                                api = Object.assign(Object.assign({}, api), module);
                            }
                            else {
                                if (id == 'index') {
                                    api = Object.assign(Object.assign({}, api), module);
                                }
                                else {
                                    for (let f in module) {
                                        if (f == 'default') {
                                            api[id] = module[f];
                                        }
                                        else {
                                            api[id + '.' + f] = module[f];
                                        }
                                    }
                                }
                            }
                        }
                    });
                })).then(() => {
                    resolve(api);
                });
            }
        });
    });
}
exports.default = loadModules;
if (require.main === module) {
    (() => __awaiter(void 0, void 0, void 0, function* () {
        try {
            yield loadModules('../plugins').then(console.log);
        }
        catch (ex) {
            logger_1.logger.error('Caught exception: %o', ex.stack);
        }
    }))();
}
//# sourceMappingURL=codeLoader.js.map