import { PlainObject } from "../../types";
import { GSCloudEvent, GSContext, GSStatus } from "../interfaces";
export declare abstract class GSDataSource {
    config: PlainObject;
    client?: PlainObject;
    constructor(config: PlainObject);
    init(): Promise<void>;
    protected abstract initClient(): Promise<PlainObject>;
    abstract execute(ctx: GSContext, args: PlainObject): Promise<any>;
}
export declare abstract class GSDataSourceAsEventSource {
    config: PlainObject;
    client: false | PlainObject;
    constructor(config: PlainObject, datasourceClient: PlainObject);
    abstract subscribeToEvent(eventKey: string, eventConfig: PlainObject, processEvent: (event: GSCloudEvent, eventConfig: PlainObject) => Promise<GSStatus>): Promise<void>;
}
export declare abstract class GSEventSource {
    config: PlainObject;
    client: false | PlainObject;
    constructor(config: PlainObject);
    init(): Promise<void>;
    protected abstract initClient(): Promise<PlainObject>;
    abstract subscribeToEvent(eventKey: string, eventConfig: PlainObject, processEvent: (event: GSCloudEvent, eventConfig: PlainObject) => Promise<GSStatus>): Promise<void>;
}
