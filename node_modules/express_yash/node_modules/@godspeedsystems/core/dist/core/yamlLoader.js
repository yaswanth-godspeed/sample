"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
* You are allowed to study this software for learning and local * development purposes only. Any other use without explicit permission by Mindgrep, is prohibited.
* Â© 2022 Mindgrep Technologies Pvt Ltd
*/
const glob_1 = __importDefault(require("glob"));
const yaml_1 = __importDefault(require("yaml"));
const path_1 = __importDefault(require("path"));
const fs_1 = require("fs");
const logger_1 = require("../logger");
function loadYaml(pathString, global = false) {
    let basePath = path_1.default.basename(pathString);
    let api = {};
    const files = glob_1.default.sync(pathString + '/**/*.?(yaml|yml)');
    files.map((file) => {
        module = yaml_1.default.parse((0, fs_1.readFileSync)(file, { encoding: 'utf-8' }));
        const id = file.replace(new RegExp(`.*?\/${basePath}\/`), '').replace(/\//g, '.').replace(/\.(yaml|yml)/i, '').replace(/\.index$/, '');
        if (global) {
            api = Object.assign(Object.assign({}, api), module);
        }
        else {
            if (id == 'index') {
                api = module;
            }
            else {
                api[id] = module;
            }
        }
    });
    return api;
}
exports.default = loadYaml;
if (require.main === module) {
    (() => __awaiter(void 0, void 0, void 0, function* () {
        try {
            yield loadYaml('../../dist/events', true).then(console.log);
        }
        catch (ex) {
            logger_1.logger.error('Caught exception %o', ex.stack);
        }
    }))();
}
//# sourceMappingURL=yamlLoader.js.map