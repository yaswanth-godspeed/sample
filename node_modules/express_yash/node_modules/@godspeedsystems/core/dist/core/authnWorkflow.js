"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_auth_refresh_1 = __importDefault(require("axios-auth-refresh"));
const logger_1 = require("../logger");
function refreshToken(ds, ctx, failedRequest) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield ds.authn(ctx);
        if (response.success) {
            let result = response.data;
            logger_1.childLogger.info('response from authn %o', result);
            if (result.headers) {
                for (let header in result.headers) {
                    ds.client.defaults.headers.common[header] = result.headers[header];
                    if (failedRequest) {
                        failedRequest.config.headers[header] = result.headers[header];
                    }
                }
            }
            if (result.params) {
                ds.client.defaults.params = ds.client.defaults.params || {};
                for (let param in result.params) {
                    ds.client.defaults.params[param] = result.params[param];
                    if (failedRequest) {
                        failedRequest.config.params[param] = result.params[param];
                    }
                }
            }
            return result;
        }
    });
}
function authnWorkflow(ds, ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield refreshToken(ds, ctx);
        if (response === null || response === void 0 ? void 0 : response.statusCodes) {
            (0, axios_auth_refresh_1.default)(ds.client, (failedRequest) => {
                return refreshToken(ds, ctx, failedRequest);
            }, {
                statusCodes: response.statusCodes,
                pauseInstanceWhileRefreshing: true,
            });
        }
        return response;
    });
}
exports.default = authnWorkflow;
//# sourceMappingURL=authnWorkflow.js.map