"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yamlLoader_1 = __importDefault(require("./yamlLoader"));
const validation_1 = __importDefault(require("./validation"));
const logger_1 = require("../logger");
const loadAndRegisterDefinitions = (pathString) => __awaiter(void 0, void 0, void 0, function* () {
    const definitions = (0, yamlLoader_1.default)(pathString, false);
    logger_1.logger.debug('Definitions: %o', definitions);
    validation_1.default.addSchema({
        $id: 'https://godspeed.systems/definitions.json',
        definitions,
    });
    logger_1.logger.debug('Definitions loaded and registered to ajvInstance');
    return definitions;
});
exports.default = loadAndRegisterDefinitions;
//# sourceMappingURL=definitionsLoader.js.map