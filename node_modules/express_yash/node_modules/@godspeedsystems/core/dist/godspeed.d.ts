import { GSActor, GSCloudEvent, GSContext, GSStatus } from './core/interfaces';
import { GSDataSource, GSEventSource } from './core/_interfaces/sources';
import { PlainObject } from './types';
export interface GodspeedParams {
    eventsFolderPath?: string;
    workflowsFolderPath?: string;
    definitionsFolderPath?: string;
    datasourcesFolderPath?: string;
    mappingsFolderPath?: string;
    configFolderPath?: string;
    eventsourcesFolderPath?: string;
}
declare class Godspeed {
    datasources: {
        [key: string]: GSDataSource;
    };
    eventsources: {
        [key: string]: GSEventSource;
    };
    workflows: PlainObject;
    eventsConfig: PlainObject;
    definitions: PlainObject;
    config: PlainObject;
    folderPaths: {
        events: string;
        workflows: string;
        definitions: string;
        config: string;
        datasources: string;
        eventsources: string;
    };
    constructor(params?: GodspeedParams);
    initilize(): void;
    private _loadEvents;
    private _loadDefinitions;
    private _loadFunctions;
    private _loadDatasources;
    private _loadEventsources;
    private subscribeToEvents;
    private processEvent;
}
export { GSEventSource, GSDataSource, GSActor, GSCloudEvent, GSStatus, PlainObject, GSContext };
export default Godspeed;
