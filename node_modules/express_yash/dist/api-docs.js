"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * You are allowed to study this software for learning and local * development purposes only. Any other use without explicit permission by Mindgrep, is prohibited.
 * Â© 2022 Mindgrep Technologies Pvt Ltd
 */
const yamlLoader_1 = __importDefault(require("@godspeedsystems/core/dist/core/yamlLoader"));
const yaml_1 = __importDefault(require("yaml"));
const logger_1 = require("@godspeedsystems/core/dist/logger");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
// add it here, because of circular dependency of logger
function removeNulls(obj) {
    const isArray = Array.isArray(obj);
    for (const k of Object.keys(obj)) {
        if (obj[k] === null) {
            if (isArray) {
                //@ts-ignore
                obj.splice(k, 1);
            }
            else {
                delete obj[k];
            }
        }
        else if (typeof obj[k] === 'object') {
            removeNulls(obj[k]);
        }
        //@ts-ignore
        if (isArray && obj.length === k) {
            removeNulls(obj);
        }
    }
    return obj;
}
function generateSchema(eventsFolderPath, definitionsFolderPath, configPath, port) {
    return __awaiter(this, void 0, void 0, function* () {
        const eventsSchema = yield loadEventsYaml(eventsFolderPath);
        const definitions = yield (0, yamlLoader_1.default)(definitionsFolderPath, false);
        let finalSpec = {};
        const swaggerCommonPart = {
            "openapi": "3.0.0",
            "info": {
                "version": "0.0.1",
                "title": "Godspeed: Sample Microservice",
                "description": "Sample API calls demonstrating the functionality of Godspeed framework",
                "termsOfService": "http://swagger.io/terms/",
                "contact": {
                    "name": "Mindgrep Technologies Pvt Ltd",
                    "email": "talktous@mindgrep.com",
                    "url": "https://docs.mindgrep.com/docs/microservices/intro"
                },
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
                }
            },
            "servers": [{
                    "url": `http://localhost:${port}`
                }],
            "paths": {}
        };
        let swaggerSpecBase = JSON.parse(JSON.stringify(swaggerCommonPart));
        try {
            const swaggerfilePath = path_1.default.resolve(path_1.default.join(configPath, 'swagger.json'));
            if (fs_extra_1.default.existsSync(swaggerfilePath)) {
                let swaggerSpecCustom = JSON.parse(fs_extra_1.default.readFileSync(swaggerfilePath, 'utf-8'));
                swaggerSpecBase = Object.assign(Object.assign({}, swaggerSpecBase), { info: Object.assign({}, swaggerSpecCustom.info) });
            }
            finalSpec = swaggerSpecBase;
            Object.keys(eventsSchema).forEach((event) => {
                var _a, _b, _c, _d;
                let apiEndPoint = event.split('.')[2];
                apiEndPoint = apiEndPoint.replaceAll(/:([^\/]+)/g, '{$1}'); //We take :path_param. OAS3 takes {path_param}
                const method = event.split('.')[1];
                const eventSchema = eventsSchema[event];
                //Initialize the schema for this method, for given event
                let methodSpec = {
                    summary: eventSchema.summary,
                    description: eventSchema.description,
                    requestBody: eventSchema.body || ((_b = (_a = eventSchema.data) === null || _a === void 0 ? void 0 : _a.schema) === null || _b === void 0 ? void 0 : _b.body),
                    parameters: eventSchema.parameters ||
                        eventSchema.params ||
                        ((_d = (_c = eventSchema.data) === null || _c === void 0 ? void 0 : _c.schema) === null || _d === void 0 ? void 0 : _d.params),
                    responses: eventSchema.responses,
                };
                //Set it in the overall schema
                finalSpec.paths[apiEndPoint] = Object.assign(Object.assign({}, finalSpec.paths[apiEndPoint]), { [method]: methodSpec });
            });
            // add definitions{models} in swagger specs
            finalSpec.definitions = definitions;
        }
        catch (error) {
            logger_1.logger.error(error);
        }
        removeNulls(finalSpec);
        return finalSpec;
    });
}
exports.default = generateSchema;
function loadEventsYaml(path) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield (0, yamlLoader_1.default)(path, true);
        }
        catch (ex) {
            logger_1.logger.error('Error in reading events YAMLs', ex);
            process.exit(1);
        }
    });
}
if (require.main === module) {
    const eventPath = '/workspace/development/app/src/events';
    const definitionsPath = '/workspace/development/app/src/definitions';
    const configPath = '/workspace/development/app/config';
    generateSchema(eventPath, definitionsPath, configPath, path_1.default)
        .then((schema) => {
        fs_extra_1.default.outputFile('/workspace/development/app/docs/api-doc.yaml', yaml_1.default.stringify(schema), (err) => {
            if (err) {
                logger_1.logger.error('Error in generating /workspace/development/app/docs/api-doc.yaml file %o', err);
            }
            else {
                logger_1.logger.info('/workspace/development/app/docs/api-doc.yaml file is saved!');
            }
        });
    })
        .catch((e) => {
        logger_1.logger.error('Error: %o', e);
    });
}
//# sourceMappingURL=api-docs.js.map