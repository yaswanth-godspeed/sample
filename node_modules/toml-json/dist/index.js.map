{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["const fs = require('fs');\nimport { resolve } from 'path';\n\ninterface ifsJson {\n  [key: string]: string | number | boolean | Array<ifsJson> | ifsJson;\n}\n\n/**\n * TOML to JSON\n * @param source\n */\nconst tomlJson = <T extends object>(source: { fileUrl?: string; data?: string }): T | undefined => {\n  let arr: Array<string> = [];\n  if (source.fileUrl) {\n    arr = fs.readFileSync(resolve('.', source.fileUrl)).toString().split('\\n');\n  } else if (source.data) {\n    arr = source.data.split('\\n');\n  } else {\n    return;\n  }\n\n  const obj: ifsJson = {};\n  let key = '';\n\n  /**\n   * The key is array of Line breaks\n   */\n  let keyArrayB = '';\n\n  /**\n   * The value is array of Line breaks\n   */\n  let valueArrayB = '';\n\n  for (let str of arr) {\n    if(str.indexOf('#') === 0){\n      continue;\n    }\n    if (str.indexOf('#') !== -1) {\n      str = str.slice(0, str.indexOf('#') - 1);\n    }\n    let noSpace = str.replace(/(^ +)|( +$)/g, '');\n\n    if (noSpace !== '') {\n      if (valueArrayB !== '') {\n        valueArrayB += str.replace(/(^ +)|( +$)/g, '');\n      }\n\n      if (valueArrayB === '' || (valueArrayB !== '' && str === ']')) {\n        // Synthesize array string\n        if (valueArrayB !== '') {\n          noSpace = `${keyArrayB} = ${valueArrayB}`;\n        }\n\n        const value = /^\\[(.+)\\]$/.exec(noSpace);\n   \n\n        // if it's obj\n        if (value && valueArrayB === '') {\n         \n          if (value[1].indexOf('.') === -1) {\n            key = value[1];\n            obj[key] = {};\n          } else {\n            objAdd(obj, value[1]);\n          }\n        } else {\n          valueArrayB = '';\n          keyArrayB = '';\n\n          const sttr = /^(.+) = (.+)/.exec(noSpace);\n          if (sttr) {\n            // It's array of Line breaks\n            if (sttr[2] === '[') {\n              keyArrayB = sttr[1];\n              valueArrayB = '[';\n            } else {\n              const sttrValue = attrValueGet(sttr[2]);\n              if (key === '') {\n                obj[sttr[1]] = sttrValue;\n              } else {\n                setAttrValue(obj, sttr[1], sttrValue);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return obj as T;\n};\n\n/**\n * set value for object attribute of last\n * @param obj\n * @param sttrKey\n * @param sttrValue\n */\nconst setAttrValue = (obj: ifsJson, sttrKey: string, sttrValue: any) => {\n  const keys = Object.keys(obj);\n  let keyValue: string = '';\n  for (const str of keys) {\n    if (typeof obj[str] === 'object' && !Array.isArray(obj[str])) {\n      keyValue = str;\n    }\n  }\n\n  if (keyValue === '') {\n    obj[sttrKey] = sttrValue;\n  } else {\n    setAttrValue(obj[keyValue] as ifsJson, sttrKey, sttrValue);\n  }\n};\n\n/**\n * get attribute value\n * @param str\n */\nconst attrValueGet = (str: string): any => {\n  str = str.replace(/\\\"/g, '');\n\n  // boolen\n  if (str === 'true') {\n    return true;\n  } else if (str === 'false') {\n    return false;\n  }\n\n  // number\n  const numStr = /([\\d\\.]+)/.exec(str);\n  if (\n    numStr &&\n    numStr[1] === str &&\n    str.indexOf('.') === str.lastIndexOf('.')\n  ) {\n    return Number(str);\n  }\n\n  // Convert array string to array object\n  if( str === '[]') {\n    return []\n  }\n\n  const arr = /^\\[(.+)\\]$/.exec(str);\n  if (arr) {\n    return strToArr(arr[1]);\n  }\n\n  return str;\n};\n\n/**\n * Convert string to array\n * @param str\n */\nconst strToArr = (str: string): Array<any> => {\n  let list: Array<any> = [];\n  if (str.indexOf('[') === -1) {\n    const valueArr = str.split(',');\n    for(const value of valueArr) {\n      list.push(value.replace(/(^ +)|( +$)/g, ''));\n    }\n  } else {\n    const cArr = str.split('');\n    let startNum = 0;\n    let value = '';\n    for (const c of cArr) {\n      if (c === '[') {\n        startNum++;\n      } else if (c === ']') {\n        startNum--;\n      }\n\n      if (startNum === 0 && c === ',') {\n        list.push(value.replace(/(^ +)|( +$)/g, ''));\n        value = '';\n      } else {\n        value += c;\n      }\n    }\n \n    list.push(value.replace(/(^ +)|( +$)/g, ''));\n  }\n\n  const arr: Array<any> = [];\n  for (const n of list) {\n    arr.push(attrValueGet(n));\n  }\n\n  return arr;\n};\n\n/**\n * obj add\n * @param obj\n * @param str\n */\nconst objAdd = (obj: ifsJson, str: string) => {\n  const value = /^(.+)\\.(.+)/.exec(str);\n  if (value) {\n    if (obj[value[1]]) {\n      objAdd(obj[value[1]] as ifsJson, value[2]);\n    }\n  } else {\n    obj[str] = {};\n  }\n};\n\nexport default tomlJson;\n"]}