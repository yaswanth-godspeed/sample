"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_CONFIG = exports.CONFIG_FILE_NAME = exports.Type = exports.SourceType = exports.DataSource = void 0;
const core_1 = require("@godspeedsystems/core");
const client_1 = require("@prisma/client");
function responseCode(method) {
    return response_codes[method] || 200;
}
const response_codes = {
    find: 200,
    findFirst: 200,
    findUnique: 200,
    findMany: 200,
    create: 201,
    createMany: 201,
    update: 204,
    updateMany: 204,
    upsert: 201,
    delete: 202,
    deleteMany: 202,
    count: 200,
    aggregate: 200,
    groupBy: 200,
};
class DataSource extends core_1.GSDataSource {
    initClient() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // TODO: until we fugure out, how to share path between prisma file and our module loader
                // we are supporting only one prisma db
                // const module = await import(`../../../node_modules/.prisma/${this.config.name}`);
                // const prisma = new module.PrismaClient();
                const prisma = new client_1.PrismaClient();
                yield prisma.$connect();
                return prisma;
            }
            catch (error) {
                throw error;
            }
        });
    }
    execute(ctx, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const { logger } = ctx;
            const _a = args, { meta: { entityType, method, fnNameInWorkflow } } = _a, rest = __rest(_a, ["meta"]);
            let prismaMethod;
            try {
                if (this.client) {
                    const client = this.client;
                    // @ts-ignore
                    if (entityType && !client[entityType]) {
                        return Promise.reject(new core_1.GSStatus(false, 400, undefined, `Invalid entityType '${entityType}' in ${fnNameInWorkflow}.`));
                    }
                    // @ts-ignore
                    prismaMethod = client[entityType][method];
                    if (method && !prismaMethod) {
                        return Promise.reject(new core_1.GSStatus(false, 500, undefined, `Invalid CRUD method '${method}' in ${fnNameInWorkflow}`));
                    }
                    // @ts-ignore
                    const prismaResponse = yield prismaMethod.bind(client)(rest);
                    return Promise.resolve(new core_1.GSStatus(true, responseCode(method), undefined, prismaResponse));
                }
            }
            catch (error) {
                logger.error(error);
                return Promise.reject(new core_1.GSStatus(false, 400, error.message, JSON.stringify(error.message)));
            }
        });
    }
}
exports.DataSource = DataSource;
const SourceType = 'DS';
exports.SourceType = SourceType;
const Type = 'prisma'; // this is the loader file of the plugin, So the final loader file will be `types/${Type.js}`
exports.Type = Type;
const CONFIG_FILE_NAME = 'prisma'; // in case of event source, this also works as event identifier, and in case of datasource works as datasource name
exports.CONFIG_FILE_NAME = CONFIG_FILE_NAME;
const DEFAULT_CONFIG = {};
exports.DEFAULT_CONFIG = DEFAULT_CONFIG;
//# sourceMappingURL=index.js.map