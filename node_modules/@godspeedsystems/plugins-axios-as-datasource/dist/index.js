"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_CONFIG = exports.CONFIG_FILE_NAME = exports.Type = exports.SourceType = exports.DataSource = void 0;
const core_1 = require("@godspeedsystems/core");
const axios_1 = __importDefault(require("axios"));
class DataSource extends core_1.GSDataSource {
    initClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const _a = this.config, { base_url } = _a, rest = __rest(_a, ["base_url"]);
            const client = axios_1.default.create(Object.assign({ baseURL: base_url }, rest));
            return client;
        });
    }
    execute(ctx, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const { logger } = ctx;
            const _a = args, { meta: { fnNameInWorkflow } } = _a, rest = __rest(_a, ["meta"]);
            const [, , method, url] = fnNameInWorkflow.split('.');
            try {
                const client = this.client;
                const response = yield client(Object.assign({ method: method.toLowerCase(), url }, rest));
                return new core_1.GSStatus(true, response.status, response.statusText, response.data, response.headers);
            }
            catch (error) {
                const { request, response } = error;
                // request initilized but failed
                if (response) {
                    const { status, data: { message }, headers } = response;
                    return new core_1.GSStatus(false, status, message, undefined, headers);
                }
                // request sent but no response received
                if (request) {
                    return new core_1.GSStatus(false, 503, 'Server timeout.', undefined, undefined);
                }
                return new core_1.GSStatus(false, 500, 'Oops! Something went wrong while setting up request.', undefined, undefined);
            }
        });
    }
}
exports.DataSource = DataSource;
const SourceType = 'DS';
exports.SourceType = SourceType;
const Type = 'axios'; // this is the loader file of the plugin, So the final loader file will be `types/${Type.js}`
exports.Type = Type;
const CONFIG_FILE_NAME = 'api'; // in case of event source, this also works as event identifier, and in case of datasource works as datasource name
exports.CONFIG_FILE_NAME = CONFIG_FILE_NAME;
const DEFAULT_CONFIG = {};
exports.DEFAULT_CONFIG = DEFAULT_CONFIG;
//# sourceMappingURL=index.js.map