"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAndStoreWorkflow = void 0;
const generateWriteLocationForMethod_1 = require("../generateWriteLocationForMethod");
const writeFileSafely_1 = require("../writeFileSafely");
const jsYaml = require('js-yaml');
const genSummary = (method, entityName) => {
    switch (method) {
        case 'one':
            return `Fetch ${entityName}`;
        case 'create':
            return `Create ${entityName}`;
        case 'update':
            return `Update ${entityName}`;
        case 'delete':
            return `Delete ${entityName}`;
        case 'search':
            return `Fetch many ${entityName}`;
        default:
            return '';
    }
};
const genTaskId = (method, dataSourceName, entityName) => {
    return `${dataSourceName.toLowerCase()}_${entityName.toLowerCase()}_${method}`;
};
const genData = (method, entityName) => {
    return {
        index: `${entityName}s`,
        type: '_doc',
        ...(method === 'search'
            ? {
                query: `<% inputs.body.query %>`,
                from: `<% inputs.body.from || 0 %>`,
                size: `<% inputs.body.size || 10 %>`,
            }
            : method === 'update'
                ? { id: `<% inputs.body.id %>`, body: `<% inputs.body.data %>` }
                : method === 'delete'
                    ? { id: `<% inputs.body.id %>` }
                    : { body: `<% inputs.body.data %>` }),
    };
};
const genEgMethod = (method, entityName) => {
    switch (method) {
        case 'create':
            return 'index';
        case 'delete':
            return 'delete';
        case 'update':
            return 'index';
        case 'search':
            return 'search';
        default:
            return '';
    }
};
const generateAndStoreWorkflow = async (eventConfig, method) => {
    let { basePathForGeneration, dataSourceName, entityName, entityFields } = eventConfig;
    let json;
    const summary = genSummary(method, entityName);
    const taskId = genTaskId(method, dataSourceName, entityName);
    json = {
        summary,
        tasks: [
            {
                id: taskId,
                fn: 'com.gs.elasticgraph',
                args: {
                    datasource: dataSourceName,
                    data: genData(method, entityName),
                    config: {
                        method: genEgMethod(method, entityName),
                    },
                },
                on_error: { continue: false },
            },
        ],
    };
    const writeLocation = (0, generateWriteLocationForMethod_1.generateWriteLocationForMethod)(basePathForGeneration, '/functions/com/eg', dataSourceName, entityName, method);
    await (0, writeFileSafely_1.writeFileSafely)(writeLocation, jsYaml.dump(json));
    return 'generated all workflows';
};
exports.generateAndStoreWorkflow = generateAndStoreWorkflow;
//# sourceMappingURL=workflow.js.map