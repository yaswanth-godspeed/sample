"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const glob_1 = require("glob");
const yaml = __importStar(require("js-yaml"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const findDatasources = (datasourceDir) => {
    return new Promise((resolve, reject) => {
        (0, glob_1.glob)(path_1.default
            .join(datasourceDir, '**', '*.?(prisma|yaml|yml)')
            .replace(/\\/g, '/'), {
            ignore: path_1.default
                .join('**', 'generated-clients/**/*.?(prisma)')
                .replace(/\\/g, '/'),
        }, (err, datasourcePaths) => {
            if (err) {
                return reject(err);
            }
            else {
                if (datasourcePaths.length) {
                    let dsDefinitions = datasourcePaths
                        .map((datasourcePath) => {
                        let _dsDefinition = {
                            dsType: 'prisma',
                            dsFilePath: datasourcePath,
                            dsName: datasourcePath.substring(datasourcePath.lastIndexOf('/') + 1),
                        };
                        if (datasourcePath.includes('.prisma')) {
                            _dsDefinition.dsType = 'prisma';
                        }
                        else {
                            try {
                                let _dsConfig = (yaml.load(fs_1.default.readFileSync(datasourcePath, { encoding: 'utf-8' })));
                                if (_dsConfig.type === 'elasticgraph') {
                                    _dsDefinition.dsType = 'elasticgraph';
                                    _dsDefinition.dsConfig = _dsConfig;
                                }
                                else {
                                    _dsDefinition = {};
                                }
                            }
                            catch (error) {
                                console.error('error', error);
                            }
                        }
                        return _dsDefinition;
                    })
                        .filter((ds) => Object.keys(ds).length);
                    resolve(dsDefinitions);
                }
                else {
                    reject(`Can't find any valid datasources at ${datasourceDir}`);
                }
            }
        });
    });
};
exports.default = findDatasources;
//# sourceMappingURL=findDatasources.js.map