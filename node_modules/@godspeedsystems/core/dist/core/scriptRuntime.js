"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importAll = void 0;
const interfaces_1 = require("./interfaces"); // eslint-disable-line
const logger_1 = require("../logger");
function importAll(sourceScope, targetScope) {
    for (let name in sourceScope) {
        targetScope[name] = sourceScope[name];
    }
}
exports.importAll = importAll;
/**
 * Can be called for gsFunction.args, gsFunction.on_error.transform and switch.condition
 * Input an be scalar or object
 */
function evaluateScript(ctx, script, taskValue) {
    return __awaiter(this, void 0, void 0, function* () {
        logger_1.childLogger.debug('before evaluateScript %s', script);
        if (!script) {
            return;
        }
        try {
            return script(ctx.config, ctx.inputs.data, ctx.outputs, ctx.mappings, taskValue);
        }
        catch (err) {
            logger_1.childLogger.error('Error in parsing script: %s', JSON.stringify(err.stack));
            ctx.exitWithStatus = new interfaces_1.GSStatus(false, undefined, err.message, err.stack);
            return 'Error in parsing script';
        }
    });
}
exports.default = evaluateScript;
//# sourceMappingURL=scriptRuntime.js.map