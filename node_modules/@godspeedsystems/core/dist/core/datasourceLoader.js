"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const glob_1 = require("glob");
const path_1 = __importDefault(require("path"));
const logger_1 = require("../logger");
const expandVariables_1 = __importDefault(require("./expandVariables"));
const yamlLoader_1 = __importDefault(require("./yamlLoader"));
// we need to scan only the first level of datasources folder
function default_1(pathString) {
    var _a, e_1, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        var _d;
        let yamlDatasources = yield (0, yamlLoader_1.default)(pathString, false);
        const prismaDatasources = yield loadPrismaDsFileNames(pathString);
        const datasourcesConfigs = Object.assign(Object.assign({}, yamlDatasources), prismaDatasources);
        if (datasourcesConfigs && !Object.keys(datasourcesConfigs).length) {
            throw new Error(`There are no datasources defined in datasource dir: ${pathString}`);
        }
        const datasources = {};
        try {
            for (var _e = true, _f = __asyncValues(Object.keys(datasourcesConfigs)), _g; _g = yield _f.next(), _a = _g.done, !_a;) {
                _c = _g.value;
                _e = false;
                try {
                    let dsName = _c;
                    logger_1.logger.debug('evaluating datasource %s', dsName);
                    datasourcesConfigs[dsName] = (0, expandVariables_1.default)(datasourcesConfigs[dsName]);
                    logger_1.logger.debug('evaluated datasource %s %o', dsName, datasourcesConfigs[dsName]);
                    // let's load the loadFn and executeFn
                    // there is an assumption that for each datasource, the type's .ts file should be inside /datasources/types folder
                    const fileName = datasourcesConfigs[dsName].type;
                    yield (_d = path_1.default.join(pathString, 'types', `${fileName}`), Promise.resolve().then(() => __importStar(require(_d)))).then((Module) => __awaiter(this, void 0, void 0, function* () {
                        const dsYamlConfig = datasourcesConfigs[dsName];
                        // @ts-ignore
                        const Constructor = Module.default;
                        const dsInstance = new Constructor(Object.assign(Object.assign({}, dsYamlConfig), { name: dsName }));
                        yield dsInstance.init(); // This should initialize and set the client in dsInstance
                        if (!dsInstance.client) {
                            throw new Error(`Client could not be initialized in your datasource ${dsName}`);
                        }
                        datasources[dsName] = dsInstance;
                    }));
                }
                finally {
                    _e = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_e && !_a && (_b = _f.return)) yield _b.call(_f);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return datasources;
    });
}
exports.default = default_1;
function loadPrismaDsFileNames(pathString) {
    return __awaiter(this, void 0, void 0, function* () {
        let basePath = path_1.default.basename(pathString);
        let prismaSchemas = {};
        const files = glob_1.glob.sync(path_1.default.join(pathString, '**', '*.?(prisma)').replace(/\\/g, '/'));
        files.forEach((file) => {
            const id = file
                .replace(new RegExp(`.*?\/${basePath}\/`), '')
                .replace(/\//g, '.')
                .replace(/\.(prisma)/i, '')
                .replace(/\.index$/, '');
            prismaSchemas = Object.assign(Object.assign({}, prismaSchemas), {
                [id]: {
                    type: 'prisma',
                    name: id,
                },
            });
        });
        return prismaSchemas;
    });
}
//# sourceMappingURL=datasourceLoader.js.map