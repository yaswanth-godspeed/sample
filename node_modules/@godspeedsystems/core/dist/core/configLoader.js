"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
* You are allowed to study this software for learning and local * development purposes only. Any other use without explicit permission by Mindgrep, is prohibited.
* Â© 2022 Mindgrep Technologies Pvt Ltd
*/
const fs = __importStar(require("fs"));
const process = __importStar(require("process"));
const yaml = __importStar(require("js-yaml"));
const logger_1 = require("../logger");
function iterate_yaml_directories(current_yaml_root) {
    var recursive_object_state = {};
    // list down all directories and iterate back on child directories
    var files = fs.readdirSync(current_yaml_root);
    files = files.sort(function (a, b) {
        return b.split('.').length - a.split('.').length;
    });
    //To determine the yaml property for which the current iteration is for
    const paths_split_array = current_yaml_root.split('/');
    const current_property = paths_split_array[paths_split_array.length - 1];
    if (!recursive_object_state.hasOwnProperty(current_property))
        recursive_object_state[current_property] = {};
    for (const file of files) {
        let temp_obj;
        if (file.endsWith('.yaml') || file.endsWith('.yml') || file.endsWith('.json')) {
            temp_obj = yaml.load(fs.readFileSync(current_yaml_root + '/' + file, { encoding: 'utf-8' }));
            if (temp_obj) {
                const temp_obj_keys = Object.keys(temp_obj);
                for (var key in temp_obj_keys) {
                    key = temp_obj_keys[key];
                    if (file == 'index.yaml' || file == 'index.yml' || file == 'index.json') {
                        recursive_object_state[current_property][key] = temp_obj[key];
                    }
                    else {
                        const file_name = file.slice(0, -5);
                        if (!recursive_object_state[current_property].hasOwnProperty(file_name)) {
                            recursive_object_state[current_property][file_name] = {};
                        }
                        recursive_object_state[current_property][file_name][key] = temp_obj[key];
                    }
                }
            }
        }
        else if (!file.endsWith('.yaml')) {
            if (file.includes('.') || current_yaml_root.includes('node_modules'))
                continue;
            const next_yaml_root = current_yaml_root + '/' + file;
            const intermediate_object_state = iterate_yaml_directories(next_yaml_root);
            const intermediate_object_state_keys = Object.keys(intermediate_object_state);
            for (var key in intermediate_object_state_keys) {
                key = intermediate_object_state_keys[key];
                if (!recursive_object_state[current_property].hasOwnProperty(key))
                    recursive_object_state[current_property][key] = {};
                recursive_object_state[current_property][key] =
                    intermediate_object_state[key];
            }
        }
    }
    return recursive_object_state;
}
;
exports.default = iterate_yaml_directories;
if (require.main === module) {
    var relative_config_root = process.argv.slice(2)[0];
    var nested_yaml_result = iterate_yaml_directories(relative_config_root);
    logger_1.logger.info('yaml object %o', nested_yaml_result);
    logger_1.logger.info('object as string %s', JSON.stringify(nested_yaml_result, null, 2));
}
//# sourceMappingURL=configLoader.js.map